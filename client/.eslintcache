[{"C:\\_MyProjects\\cryptoda\\client\\src\\App.js":"1","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\reducers\\index.js":"2","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\actions\\testConfigs.js":"3","C:\\_MyProjects\\cryptoda\\client\\src\\reportWebVitals.js":"4","C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Rates.page.js":"5","C:\\_MyProjects\\cryptoda\\client\\src\\components\\Test.component.js":"6","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\actions\\types.js":"7","C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Portfolio.page.js":"8","C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\Main.layoutpart.js":"9","C:\\_MyProjects\\cryptoda\\client\\src\\index.js":"10","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\reducers\\testReducer.js":"11","C:\\_MyProjects\\cryptoda\\client\\src\\components\\ratesTable.js":"12","C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\LeftSidebar.layoutpart.js":"13","C:\\_MyProjects\\cryptoda\\client\\src\\components\\portfolioTable.js":"14","C:\\_MyProjects\\cryptoda\\client\\src\\components\\investmentsTable.js":"15","C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Investments.page.js":"16"},{"size":545,"mtime":1612261304637,"results":"17","hashOfConfig":"18"},{"size":138,"mtime":1612256236016,"results":"19","hashOfConfig":"18"},{"size":98,"mtime":1612256425356,"results":"20","hashOfConfig":"18"},{"size":362,"mtime":1606206756018,"results":"21","hashOfConfig":"18"},{"size":1128,"mtime":1612900887954,"results":"22","hashOfConfig":"18"},{"size":115,"mtime":1612816706579,"results":"23","hashOfConfig":"18"},{"size":35,"mtime":1612256373193,"results":"24","hashOfConfig":"18"},{"size":2792,"mtime":1613213596521,"results":"25","hashOfConfig":"18"},{"size":600,"mtime":1612816680488,"results":"26","hashOfConfig":"18"},{"size":755,"mtime":1612899905887,"results":"27","hashOfConfig":"18"},{"size":237,"mtime":1612256491086,"results":"28","hashOfConfig":"18"},{"size":9534,"mtime":1613153993295,"results":"29","hashOfConfig":"18"},{"size":1037,"mtime":1615373663491,"results":"30","hashOfConfig":"18"},{"size":4386,"mtime":1613213194087,"results":"31","hashOfConfig":"18"},{"size":4230,"mtime":1615383168942,"results":"32","hashOfConfig":"18"},{"size":3364,"mtime":1615383276001,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"66gjgi",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\_MyProjects\\cryptoda\\client\\src\\App.js",["71"],"import React from 'react';\nimport MainLayoutPart from './layout-parts/Main.layoutpart';\nimport { Container, Row, Col } from 'reactstrap';\nimport LeftSidebarRedux from './redux/containers/test.redux';\nimport LeftSidebarLayoutPart from './layout-parts/LeftSidebar.layoutpart';\n\nconst App = () => (\n  <div>\n    <Container fluid={true} >\n      <Row>\n        <Col sm=\"2\">\n          <LeftSidebarLayoutPart />\n        </Col>\n        <Col sm=\"10\">\n          <MainLayoutPart />\n        </Col>\n      </Row>\n    </Container>\n  </div>\n)\n\nexport default App;",["72","73"],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\reducers\\index.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\actions\\testConfigs.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\reportWebVitals.js",[],["74","75"],"C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Rates.page.js",["76"],"C:\\_MyProjects\\cryptoda\\client\\src\\components\\Test.component.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\actions\\types.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Portfolio.page.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\Main.layoutpart.js",["77"],"import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport TestRedux from '../redux/containers/test.redux';\r\nimport { Row, Col } from 'reactstrap';\r\nimport './Main.layoutpart.css';\r\nimport RatesPage from '../pages/Rates.page';\r\nimport PortfolioPage from '../pages/Portfolio.page';\r\n\r\nconst MainLayoutPart = () => (\r\n  <Row className='main'>\r\n    <Col>\r\n      <Switch>\r\n        <Route exact path='/rates' component={RatesPage} />\r\n        <Route exact path='/portfolio' component={PortfolioPage} />\r\n      </Switch>\r\n    </Col>\r\n  </Row>\r\n)\r\n\r\nexport default MainLayoutPart;","C:\\_MyProjects\\cryptoda\\client\\src\\index.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\reducers\\testReducer.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\components\\ratesTable.js",["78"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useTable, usePagination } from 'react-table'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport NumberFormat from 'react-number-format';\r\n\r\n// Create a default prop getter\r\nconst defaultPropGetter = () => ({})\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    border: \"1px solid rgba(224, 224, 224, 1)\",\r\n  },\r\n  body: {\r\n    fontSize: 12,\r\n    border: \"1px solid rgba(224, 224, 224, 1)\",\r\n  },\r\n  sizeSmall: {\r\n    padding: \"8px 5px 8px 5px\",\r\n  },\r\n}))(TableCell);\r\n\r\nexport default function ListingTable({ data, fetchData, loading, pageCount: controlledPageCount, getCellProps = defaultPropGetter }) {\r\n\r\n  const classes = useStyles();\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Rank',\r\n        accessor: 'cmc_rank'\r\n      },\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'name', // accessor is the \"key\" in the data\r\n        Cell: ({ row }) => (\r\n          <Link href={`/cryptos/${row.values.symbol}`}>\r\n            <a>{row.values.name}</a>\r\n          </Link>\r\n        ),\r\n      },\r\n      {\r\n        Header: 'Symbol',\r\n        accessor: 'symbol',\r\n      },\r\n      {\r\n        Header: 'Market capitalization',\r\n        accessor: 'quote.USD.market_cap',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.market_cap']} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Circulating supply',\r\n        accessor: 'circulating_supply',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values.circulating_supply} displayType={'text'} thousandSeparator={true} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Total supply',\r\n        accessor: 'total_supply',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values.total_supply} displayType={'text'} thousandSeparator={true} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Max supply',\r\n        accessor: 'max_supply',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values.max_supply} displayType={'text'} thousandSeparator={true} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Price',\r\n        accessor: 'quote.USD.price',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.price']} displayType={'text'} thousandSeparator={true} prefix={'$'} decimalScale={2} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Volume 24h',\r\n        accessor: 'quote.USD.volume_24h',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.volume_24h']} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n        },\r\n      },\r\n      {\r\n        Header: '%1h',\r\n        accessor: 'quote.USD.percent_change_1h',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.percent_change_1h']} displayType={'text'} thousandSeparator={true} suffix={'%'} decimalScale={2} />\r\n        },\r\n      },\r\n      {\r\n        Header: '%24h',\r\n        accessor: 'quote.USD.percent_change_24h',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.percent_change_24h']} displayType={'text'} thousandSeparator={true} prefix={'%'} decimalScale={2} />\r\n        },\r\n      },\r\n      {\r\n        Header: '%7d',\r\n        accessor: 'quote.USD.percent_change_7d',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.percent_change_7d']} displayType={'text'} thousandSeparator={true} prefix={'%'} decimalScale={2} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Tags',\r\n        accessor: 'tags',\r\n        Cell: ({ row }) => {\r\n          return <span>{row.values.tags.join(', ')}</span>\r\n        },\r\n      },\r\n    ],\r\n    []\r\n  )\r\n\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    // Get the state from the instance\r\n    state: { pageIndex, pageSize },\r\n  } = useTable({\r\n    columns,\r\n    data,\r\n    initialState: { pageIndex: 0 }, // Pass our hoisted table state\r\n    manualPagination: true, // Tell the usePagination\r\n    // hook that we'll handle our own data fetching\r\n    // This means we'll also have to provide our own\r\n    // pageCount.\r\n    pageCount: controlledPageCount,\r\n  },\r\n    usePagination\r\n  )\r\n\r\n  // Listen for changes in pagination and use the state to fetch our new data\r\n  useEffect(() => {\r\n    fetchData({ pageIndex, pageSize })\r\n  }, [fetchData, pageIndex, pageSize])\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      {/*<pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              pageIndex,\r\n              pageSize,\r\n              pageCount,\r\n              canNextPage,\r\n              canPreviousPage,\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n          </pre>*/}\r\n      <TableContainer component={Paper}>\r\n        <Table {...getTableProps()} className={classes.table} size=\"small\">\r\n          <TableHead>\r\n            {headerGroups.map(headerGroup => (\r\n              <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <StyledTableCell {...column.getHeaderProps()}>{column.render('Header')}</StyledTableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableHead>\r\n          <TableBody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n              prepareRow(row)\r\n              return (\r\n                <TableRow {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return <StyledTableCell {...cell.getCellProps([\r\n                      {\r\n                        className: cell.column.className,\r\n                        style:\r\n                          cell.column.id === 'symbol' ? {\r\n                            fontWeight: `bold`,\r\n                          } : cell.column.id === 'quote.USD.price' ? {\r\n                            fontWeight: `bold`\r\n                          } : cell.column.id === 'quote.USD.percent_change_1h' ? {\r\n                            backgroundColor: cell.value >= 0 ? `hsl(135, 100%, 50%)` : `hsl(15, 100%, 50%)`\r\n                          } : cell.column.id === 'quote.USD.percent_change_24h' ? {\r\n                            backgroundColor: cell.value >= 0 ? `hsl(135, 100%, 50%)` : `hsl(15, 100%, 50%)`\r\n                          } : cell.column.id === 'quote.USD.percent_change_7d' ? {\r\n                            backgroundColor: cell.value >= 0 ? `hsl(135, 100%, 50%)` : `hsl(15, 100%, 50%)`\r\n                          } : cell.column.style\r\n                      },\r\n                      getCellProps(cell),\r\n                    ])}>{cell.render('Cell')}</StyledTableCell>\r\n                  })}\r\n                </TableRow>\r\n              )\r\n            })}\r\n            <TableRow>\r\n              {loading ? (\r\n                // Use our custom loading state to show a loading indicator\r\n                <td colSpan=\"10000\">Loading...</td>\r\n              ) : (\r\n                  <td colSpan=\"10000\">\r\n                    Showing {page.length} of ~{controlledPageCount * pageSize}{' '}\r\n                results\r\n                  </td>\r\n                )}\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </>\r\n  )\r\n}","C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\LeftSidebar.layoutpart.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\components\\portfolioTable.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\components\\investmentsTable.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Investments.page.js",[],{"ruleId":"79","severity":1,"message":"80","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":24},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"83","replacedBy":"87"},{"ruleId":"85","replacedBy":"88"},{"ruleId":"79","severity":1,"message":"89","line":14,"column":11,"nodeType":"81","messageId":"82","endLine":14,"endColumn":18},{"ruleId":"79","severity":1,"message":"90","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":51,"column":13,"nodeType":"93","endLine":51,"endColumn":16},"no-unused-vars","'LeftSidebarRedux' is defined but never used.","Identifier","unusedVar","no-native-reassign",["94"],"no-negated-in-lhs",["95"],["94"],["95"],"'fetchId' is assigned a value but never used.","'TestRedux' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]