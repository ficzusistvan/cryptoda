[{"C:\\_MyProjects\\cryptoda\\client\\src\\App.js":"1","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\reducers\\index.js":"2","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\actions\\testConfigs.js":"3","C:\\_MyProjects\\cryptoda\\client\\src\\reportWebVitals.js":"4","C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Rates.page.js":"5","C:\\_MyProjects\\cryptoda\\client\\src\\components\\Test.component.js":"6","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\actions\\types.js":"7","C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Portfolio.page.js":"8","C:\\_MyProjects\\cryptoda\\client\\src\\index.js":"9","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\reducers\\testReducer.js":"10","C:\\_MyProjects\\cryptoda\\client\\src\\components\\ratesTable.js":"11","C:\\_MyProjects\\cryptoda\\client\\src\\components\\portfolioTable.js":"12","C:\\_MyProjects\\cryptoda\\client\\src\\components\\investmentsTable.js":"13","C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Investments.page.js":"14","C:\\_MyProjects\\cryptoda\\client\\src\\redux\\store.js":"15","C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Balancer.page.js":"16","C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Home.page.js":"17","C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\ContextMenu.js":"18","C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\Main.js":"19","C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\Navigation.js":"20"},{"size":554,"mtime":1615805892733,"results":"21","hashOfConfig":"22"},{"size":138,"mtime":1612256236016,"results":"23","hashOfConfig":"22"},{"size":98,"mtime":1612256425356,"results":"24","hashOfConfig":"22"},{"size":362,"mtime":1606206756018,"results":"25","hashOfConfig":"22"},{"size":1126,"mtime":1613154003390,"results":"26","hashOfConfig":"22"},{"size":115,"mtime":1612816706579,"results":"27","hashOfConfig":"22"},{"size":35,"mtime":1612256373193,"results":"28","hashOfConfig":"22"},{"size":2959,"mtime":1615548001643,"results":"29","hashOfConfig":"22"},{"size":809,"mtime":1615542685453,"results":"30","hashOfConfig":"22"},{"size":237,"mtime":1612256491086,"results":"31","hashOfConfig":"22"},{"size":8322,"mtime":1615558512410,"results":"32","hashOfConfig":"22"},{"size":4294,"mtime":1615547241495,"results":"33","hashOfConfig":"22"},{"size":3571,"mtime":1615547384272,"results":"34","hashOfConfig":"22"},{"size":3421,"mtime":1615547907377,"results":"35","hashOfConfig":"22"},{"size":197,"mtime":1574442955932,"results":"36","hashOfConfig":"22"},{"size":1097,"mtime":1615809756770,"results":"37","hashOfConfig":"22"},{"size":575,"mtime":1615805538640,"results":"38","hashOfConfig":"22"},{"size":1413,"mtime":1615805937676,"results":"39","hashOfConfig":"22"},{"size":918,"mtime":1615806044851,"results":"40","hashOfConfig":"22"},{"size":1166,"mtime":1615807221540,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"66gjgi",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\_MyProjects\\cryptoda\\client\\src\\App.js",["87"],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\reducers\\index.js",[],["88","89"],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\actions\\testConfigs.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\reportWebVitals.js",[],["90","91"],"C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Rates.page.js",["92"],"import { React, useCallback, useRef, useState } from 'react'\r\nimport { Row, Col } from 'reactstrap'\r\nimport axios from 'axios'\r\nimport ListingsTable from '../components/ratesTable'\r\n\r\nexport default function RatesComponent() {\r\n\r\n  const [listingsData, setListingsData] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n  const [pageCount, setPageCount] = useState(0)\r\n  const fetchIdRef = useRef(0)\r\n\r\n  const fetchData = useCallback(async ({ pageSize, pageIndex }) => {\r\n    const fetchId = ++fetchIdRef.current\r\n    setLoading(true);\r\n    const listings = await axios.get('api/rates', {\r\n      params: {\r\n        pageIndex,\r\n        pageSize\r\n      }\r\n    });\r\n    setListingsData(listings.data);\r\n    setPageCount(Math.ceil(1000 / pageSize));\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <h1>Today's Cryptocurrency Prices by Market Cap</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <ListingsTable data={listingsData} fetchData={fetchData} loading={loading} pageCount={pageCount} />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}","C:\\_MyProjects\\cryptoda\\client\\src\\components\\Test.component.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\actions\\types.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Portfolio.page.js",["93"],"import axios from \"axios\";\r\nimport { useEffect, useRef, useState } from \"react\"\r\nimport { Row, Col, Button } from 'reactstrap'\r\nimport Zabo from 'zabo-sdk-js'\r\nimport config from '../config.json'\r\nimport PortfolioTable from '../components/portfolioTable'\r\nimport NumberFormat from 'react-number-format';\r\n\r\nexport default function Portfolio() {\r\n  const [portfolio, setPortfolio] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const THIS_USER = 'myliveuser';\r\n  //const THIS_USER = 'mysandboxuser';\r\n\r\n  let zabo = useRef();\r\n\r\n  useEffect(() => {\r\n    console.log(`useEffect 1 called...`);\r\n    setLoading(true);\r\n    const getData = async () => {\r\n      const resp = await axios.get('api/portfolio');\r\n      let portf = [], tot = 0;\r\n      for (const entity of resp.data) {\r\n        const wallet = entity[0];\r\n        let balances = entity[1];\r\n        for (let balance of Object.values(balances)) {\r\n          balance['wallet'] = wallet;\r\n          portf.push(balance);\r\n          tot += Number(balance.value);\r\n        }\r\n      }\r\n      setPortfolio(portf);\r\n      setTotal(tot);\r\n    }\r\n    getData();\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(`useEffect 2 called...`);\r\n    const getData = async () => {\r\n      // TODO: fix this, now zabo user is recreated every time the button is clicked\r\n      //const respUserExists = await axios.get(`api/zabo/zabo-user-exists?userId=${THIS_USER}`);\r\n      //if (!respUserExists.data) {\r\n      console.log('init zabo')\r\n      zabo.current = await Zabo.init({\r\n        //clientId: config.zabo.sandbox.clientId,\r\n        //env: 'sandbox'\r\n        clientId: config.zabo.live.clientId,\r\n        env: 'live'\r\n      });\r\n      //}\r\n    }\r\n    getData();\r\n  }, []);\r\n\r\n  function zaboConnectToProvider(e) {\r\n    zabo.current.connect({ provider: 'blockFi' }).onConnection(async (account) => {\r\n      const respZaboUser = await axios.post('api/zabo/create-zabo-user', { userId: THIS_USER, account: account });\r\n      console.log('Created user: ', respZaboUser.data);\r\n      const forcePortfolioUpdateResp = await axios.post('/api/portfolio', {});\r\n      console.log('Portfolio update run');\r\n    }).onError(error => {\r\n      console.error('account connection error:', error)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <h1>Current Portfolio</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <div class=\"alert alert-success\">\r\n            Total balance: <strong><NumberFormat value={total} displayType={'text'} thousandSeparator={true} prefix={'$'} decimalScale={2} /></strong>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Button color=\"primary\" onClick={zaboConnectToProvider}>Connect to Zabo for BlockFi access</Button>\r\n        </Col>\r\n      </Row>\r\n      <PortfolioTable data={portfolio} loading={loading} />\r\n    </>\r\n  )\r\n}","C:\\_MyProjects\\cryptoda\\client\\src\\index.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\reducers\\testReducer.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\components\\ratesTable.js",["94"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useTable, usePagination } from 'react-table'\r\nimport NumberFormat from 'react-number-format';\r\nimport { Progress } from 'reactstrap';\r\n\r\n// Create a default prop getter\r\nconst defaultPropGetter = () => ({})\r\n\r\nexport default function ListingTable({ data, fetchData, loading, pageCount: controlledPageCount, getCellProps = defaultPropGetter }) {\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Rank',\r\n        accessor: 'cmc_rank'\r\n      },\r\n      {\r\n        Header: 'Name',\r\n        accessor: 'name', // accessor is the \"key\" in the data\r\n        Cell: ({ row }) => (\r\n          <Link href={`/cryptos/${row.values.symbol}`}>\r\n            <a>{row.values.name}</a>\r\n          </Link>\r\n        ),\r\n      },\r\n      {\r\n        Header: 'Symbol',\r\n        accessor: 'symbol',\r\n      },\r\n      {\r\n        Header: 'Market capitalization',\r\n        accessor: 'quote.USD.market_cap',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.market_cap']} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Circulating supply',\r\n        accessor: 'circulating_supply',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values.circulating_supply} displayType={'text'} thousandSeparator={true} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Total supply',\r\n        accessor: 'total_supply',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values.total_supply} displayType={'text'} thousandSeparator={true} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Max supply',\r\n        accessor: 'max_supply',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values.max_supply} displayType={'text'} thousandSeparator={true} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Price',\r\n        accessor: 'quote.USD.price',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.price']} displayType={'text'} thousandSeparator={true} prefix={'$'} decimalScale={2} />\r\n        },\r\n      },\r\n      {\r\n        Header: 'Volume 24h',\r\n        accessor: 'quote.USD.volume_24h',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.volume_24h']} displayType={'text'} thousandSeparator={true} prefix={'$'} />\r\n        },\r\n      },\r\n      {\r\n        Header: '%1h',\r\n        accessor: 'quote.USD.percent_change_1h',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.percent_change_1h']} displayType={'text'} thousandSeparator={true} suffix={'%'} decimalScale={2} />\r\n        },\r\n      },\r\n      {\r\n        Header: '%24h',\r\n        accessor: 'quote.USD.percent_change_24h',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.percent_change_24h']} displayType={'text'} thousandSeparator={true} prefix={'%'} decimalScale={2} />\r\n        },\r\n      },\r\n      {\r\n        Header: '%7d',\r\n        accessor: 'quote.USD.percent_change_7d',\r\n        Cell: ({ row }) => {\r\n          return <NumberFormat value={row.values['quote.USD.percent_change_7d']} displayType={'text'} thousandSeparator={true} prefix={'%'} decimalScale={2} />\r\n        },\r\n      }\r\n    ],\r\n    []\r\n  )\r\n\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    // Get the state from the instance\r\n    state: { pageIndex, pageSize },\r\n  } = useTable({\r\n    columns,\r\n    data,\r\n    initialState: { pageIndex: 0 }, // Pass our hoisted table state\r\n    manualPagination: true, // Tell the usePagination\r\n    // hook that we'll handle our own data fetching\r\n    // This means we'll also have to provide our own\r\n    // pageCount.\r\n    pageCount: controlledPageCount,\r\n  },\r\n    usePagination\r\n  )\r\n\r\n  // Listen for changes in pagination and use the state to fetch our new data\r\n  useEffect(() => {\r\n    fetchData({ pageIndex, pageSize })\r\n  }, [fetchData, pageIndex, pageSize])\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      {/*<pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              pageIndex,\r\n              pageSize,\r\n              pageCount,\r\n              canNextPage,\r\n              canPreviousPage,\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n          </pre>*/}\r\n      <div>\r\n        <table {...getTableProps()} className=\"table table-hover\" size=\"small\">\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th scope=\"col\" {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n              prepareRow(row)\r\n              return (\r\n                <tr className=\"table-primary\" {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return <td {...cell.getCellProps([\r\n                      {\r\n                        className:\r\n                          cell.column.id === 'symbol' ? \"text-info\"\r\n                            : cell.column.id === 'quote.USD.price' ? \"text-info\"\r\n                              : cell.column.id === 'quote.USD.percent_change_1h' ? cell.value >= 0 ? \"text-success\" : \"text-danger\"\r\n                                : cell.column.id === 'quote.USD.percent_change_24h' ? cell.value >= 0 ? \"text-success\" : \"text-danger\"\r\n                                  : cell.column.id === 'quote.USD.percent_change_7d' ? cell.value >= 0 ? \"text-success\" : \"text-danger\"\r\n                                    : cell.column.className\r\n                      },\r\n                      getCellProps(cell),\r\n                    ])}>{cell.render('Cell')}</td>\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n            <tr>\r\n              {loading ? (\r\n                // Use our custom loading state to show a loading indicator\r\n                <td colSpan=\"10000\">Loading...</td>\r\n              ) : (\r\n                <td colSpan=\"10000\">\r\n                  Showing {page.length} of ~{controlledPageCount * pageSize}{' '}\r\n                results\r\n                </td>\r\n              )}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div>\r\n        <div className=\"text-center\">Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong></div>\r\n        <Progress min={0} value={pageIndex + 1} max={pageOptions.length} />\r\n      </div>\r\n\r\n      <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{`<<`}</button>\r\n        <button type=\"button\" class=\"btn btn-secondary\" onClick={() => previousPage()} disabled={!canPreviousPage}>{`<`}</button>\r\n        <button type=\"button\" class=\"btn btn-secondary\" onClick={() => nextPage()} disabled={!canNextPage}>{`>`}</button>\r\n        <button type=\"button\" class=\"btn btn-secondary\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{`>>`}</button>\r\n      </div>\r\n      <span>\r\n        {' '}| Go to page:{' '}\r\n        <input\r\n          type=\"number\"\r\n          defaultValue={pageIndex + 1}\r\n          onChange={e => {\r\n            const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n            gotoPage(page)\r\n          }}\r\n          style={{ width: '100px' }}\r\n        />\r\n      </span>{' '}\r\n      <select\r\n        value={pageSize}\r\n        onChange={e => {\r\n          setPageSize(Number(e.target.value))\r\n        }}\r\n      >\r\n        {[10, 20, 30, 40, 50].map(pageSize => (\r\n          <option key={pageSize} value={pageSize}>\r\n            Show {pageSize}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n    </>\r\n  )\r\n}","C:\\_MyProjects\\cryptoda\\client\\src\\components\\portfolioTable.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\components\\investmentsTable.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Investments.page.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\redux\\store.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Balancer.page.js",["95","96","97","98","99","100","101","102","103","104"],"C:\\_MyProjects\\cryptoda\\client\\src\\pages\\Home.page.js",["105","106","107","108","109","110","111","112","113","114","115","116"],"C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\ContextMenu.js",[],"C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\Main.js",["117"],"C:\\_MyProjects\\cryptoda\\client\\src\\layout-parts\\Navigation.js",[],{"ruleId":"118","severity":1,"message":"119","line":2,"column":8,"nodeType":"120","messageId":"121","endLine":2,"endColumn":24},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"118","severity":1,"message":"128","line":14,"column":11,"nodeType":"120","messageId":"121","endLine":14,"endColumn":18},{"ruleId":"118","severity":1,"message":"129","line":63,"column":13,"nodeType":"120","messageId":"121","endLine":63,"endColumn":37},{"ruleId":"130","severity":1,"message":"131","line":23,"column":13,"nodeType":"132","endLine":23,"endColumn":16},{"ruleId":"118","severity":1,"message":"133","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":14},{"ruleId":"118","severity":1,"message":"134","line":3,"column":16,"nodeType":"120","messageId":"121","endLine":3,"endColumn":25},{"ruleId":"118","severity":1,"message":"135","line":3,"column":27,"nodeType":"120","messageId":"121","endLine":3,"endColumn":32},{"ruleId":"118","severity":1,"message":"136","line":3,"column":34,"nodeType":"120","messageId":"121","endLine":3,"endColumn":39},{"ruleId":"118","severity":1,"message":"137","line":3,"column":51,"nodeType":"120","messageId":"121","endLine":3,"endColumn":57},{"ruleId":"118","severity":1,"message":"138","line":3,"column":59,"nodeType":"120","messageId":"121","endLine":3,"endColumn":68},{"ruleId":"118","severity":1,"message":"139","line":5,"column":8,"nodeType":"120","messageId":"121","endLine":5,"endColumn":24},{"ruleId":"118","severity":1,"message":"140","line":6,"column":8,"nodeType":"120","messageId":"121","endLine":6,"endColumn":20},{"ruleId":"118","severity":1,"message":"141","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":18},{"ruleId":"118","severity":1,"message":"142","line":13,"column":10,"nodeType":"120","messageId":"121","endLine":13,"endColumn":17},{"ruleId":"118","severity":1,"message":"143","line":1,"column":8,"nodeType":"120","messageId":"121","endLine":1,"endColumn":13},{"ruleId":"118","severity":1,"message":"144","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":19},{"ruleId":"118","severity":1,"message":"145","line":2,"column":21,"nodeType":"120","messageId":"121","endLine":2,"endColumn":29},{"ruleId":"118","severity":1,"message":"133","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":14},{"ruleId":"118","severity":1,"message":"134","line":3,"column":16,"nodeType":"120","messageId":"121","endLine":3,"endColumn":25},{"ruleId":"118","severity":1,"message":"135","line":3,"column":27,"nodeType":"120","messageId":"121","endLine":3,"endColumn":32},{"ruleId":"118","severity":1,"message":"136","line":3,"column":34,"nodeType":"120","messageId":"121","endLine":3,"endColumn":39},{"ruleId":"118","severity":1,"message":"137","line":3,"column":51,"nodeType":"120","messageId":"121","endLine":3,"endColumn":57},{"ruleId":"118","severity":1,"message":"138","line":3,"column":59,"nodeType":"120","messageId":"121","endLine":3,"endColumn":68},{"ruleId":"118","severity":1,"message":"139","line":5,"column":8,"nodeType":"120","messageId":"121","endLine":5,"endColumn":24},{"ruleId":"118","severity":1,"message":"140","line":6,"column":8,"nodeType":"120","messageId":"121","endLine":6,"endColumn":20},{"ruleId":"118","severity":1,"message":"141","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":18},{"ruleId":"118","severity":1,"message":"146","line":3,"column":8,"nodeType":"120","messageId":"121","endLine":3,"endColumn":17},"no-unused-vars","'LeftSidebarRedux' is defined but never used.","Identifier","unusedVar","no-native-reassign",["147"],"no-negated-in-lhs",["148"],["147"],["148"],"'fetchId' is assigned a value but never used.","'forcePortfolioUpdateResp' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'Jumbotron' is defined but never used.","'InvestmentsTable' is defined but never used.","'NumberFormat' is defined but never used.","'DatePicker' is defined but never used.","'loading' is assigned a value but never used.","'axios' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'TestRedux' is defined but never used.","no-global-assign","no-unsafe-negation"]